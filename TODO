
******
Next v will be 0.6.1, will tag only when taproot is cleaned up and tested properly (except script path for now).

A lot of clean up is required but most changes are easy. Will do and clean soon. Commiting anyway.

PRIORITIES

- add tests taproot keys and addresses (done, partially??)
- add tests simple p2tr spends (02 and 03)
- load public key with x-only pubkey, ensure it works for several...
- TEST sent to schnorr address and then spend
- TEST schnorr with SINGLE
- TEST schnorr with ANYONE_CAN_PAY
- add single alt spending
- add tree alt spendin


SEGWIT-related
- check if vsize is correct, esp. with the introduction of TxInputWitness - does the object need to calc byte length (for get_vsize)
  . PRIORITY - also check github python-bitcoin-utils issue example
- A '00' byte needs to be added for non-witness inputs in between witness (inputs-witnesses are 1-1!) - done??
- explain get_transaction_segwit_digest() better and test further
- clean and comment the segwit examples !
  . test some more segwit txs including nested ones

- unsigned segwit serialized transaction does not get the segwit flag/marker (signed is fine!)

- rename VarInt to CompactSize

- add Taproot to Transaction.from_raw
  . test from_raw more


- tx.get_txid() exists... also impl. tx.get_txwid
  . taproot example unsigned has txid: 25b5c96b8e0305f921e6153229f5b30515eb00e14546203754a9e01e8ac92c87
  . taproot example unsigned has txwid: 092ea577513162b941e0f5f2451a87d35ac308d4f23e133791cb978c448d00ac
  . should be above - current code has identical hash... probably it ignores the segwit marker (witnesses should exist anyway in both cases)

- maybe make RBF the default from now on (like Bitcoin Core) -- WILL NEED to change all the tests, unless I add minor hack that uses RBF by default only for taproot

- remove hex_str_to_int and int_to_hex_str !?!?!

- ADD NOTE or github issue that specifies that CODE_SEPERATOR is not handled appropriately, etc. when creating the message digest to sign

CLEAN UP 
-- in TxInput move txid+index to prevout field ?! (maybe not this one, but keep it here to re-think)
-- rename stream() to serialize() !!! (serialize() exists in some/all? already and calls stream()) -- or have both but one returns bytes and the other hex ??!?! -- sometimes we USE to_bytes() again for serialization !!??! - clean and be consistent
-- scriptPubkey to script_pubkey (but check for duplicates!)
-- use sha256 rather than hashlib.sha256
-- internally everything should be handled in bytes -- and converted to hex when displayed
-- privkey seckey (use one of the two... currently privkey is mostly used)
-- hex -> bytes use bytes.fromhex(he_str) instead of unhexlify??
-- utils tests a lot for even with y % 2 !=0 - shall we make a utils method?

IMPROVE
- why does bitcoinlib.services.service worked for connecting and proxy didn't for some students? (services probably has some redundancy code)

PRIVATE KEYS compressed
- should accept keys with 01 at the end or otherwise specify 'compressed' for the public key
- use it when generating the public key
- and when generating the address

PSBT
- add!
- https://bip174.org/

DOC-related
- add explicit documentation for each module before members...
- commit docs/usage/proxy.rst
- add segwit examples in README 
- segwit in documentation
- add more modules to documantation

CODE-related
- make all code < 80 chars !?
- improve test structure - look at python-bitcoinlib or its derived python-bitcointx for example

Efficiency
- make all internal variables bytes for processing and convert when input (hex usually) or output (displaying hex usually)
  . hmm, only applies for Addresses' classes

WINDOWS
- it seems that the default port does not work on windows; need to specify the port explicitly in NodeProxy

OTHERLIBS-related
- add to bitcoin-rpc lib option to ignore invalid ssl cert
  . needed to access remotely withut cert (for other validators from clients)
  . https://github.com/jgarzik/python-bitcoinrpc/pull/50
  . but not in a lib release yet
  . add config.ini option to optionally ignore cert so that it works when calling btcd remotely

OTHER
- reminder: update copyright in all files 2018-2022?
- create script: clean-less-than-sats 100000 bc1q86gsg4t32...
- create test with 260 outputs (inputs too much trouble) - file: test_extreme_txs.py
- create test with script of 260 and another with 66000 commands
- make test of send to P2WPKH transaction example


