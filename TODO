
******
0.5.10 is current working copy -- HAVEN'T TAGGED IT YET, will refactor PrivateKey first
0.6.0 on github - not on pypi yet...

- rename VarInt to CompactSize

- WHEN removing ecdsa lib check if the following makes sense
  . REPRESENT privkey as just an int internally
  . REPRESENT pubkey as just a a tuple of ints internally

- tx.get_txid() exists... also impl. tx.get_txwid
  . taproot example unsigned has txid: 25b5c96b8e0305f921e6153229f5b30515eb00e14546203754a9e01e8ac92c87
  . taproot example unsigned has txwid: 092ea577513162b941e0f5f2451a87d35ac308d4f23e133791cb978c448d00ac

- maybe make RBF the default from now on (like Bitcoin Core) -- WILL NEED to change all the tests, unless I add minor hack that uses RBF by default only for taproot

- remove hex_str_to_int and int_to_hex_str !?!?!

- test taproot keys and addresses
- load public key with x-only pubkey, ensure it works for several...

CLEAN UP 
-- use sha256 rather than hashlib.sha256
-- will use ecpy lib for ECSchorr (point mul, signing, etc) - use ecpy for ECDSA as well to remove ecdsa lib
-- internally everything should be handled in bytes -- and converted to hex when displayed
-- privkey seckey (use one of the two... currently privkey is mostly used)

IMPROVE
- why does bitcoinlib.services.service worked for connecting and proxy didn't for some students? (services probably has some redundancy code)

SEGWIT-related
- create TxInputWitness class that includes the witness script and knows how to serialize itself and how to calc byte length (for get_vsize)
- explain get_transaction_segwit_digest() better and test further
- clean and comment the segwit examples !
  . test some more segwit txs including nested ones

- unsigned segwit serialized transaction does not get the segwit flag/marker (signed is fine!)


Taproot-related
- bech32m (done)
- add P2trAddress and test with new example (done) ??!?


- add tests for bech32m
- refactor P2trAddress (and PublicKey?) - taproot requires just the compressed public key as a witness program (rather than witness hash 20/32bytes as segwit v0) -- thus the code talks about witness_hash but the compressed public key is there instead !!?!
- refactor Private Key (make class, that ECDSA and Schnorr inherit from!?)
- add schnorr
- add default taproot spending
- add single alt spending
- add tree alt spendin

PRIVATE KEYS compressed
- should accept keys with 01 at the end or otherwise specify 'compressed' for the public key
- use it when generating the public key
- and when generating the address


PSBT
- add!
- https://bip174.org/

DOC-related
- add explicit documentation for each module before members...
- commit docs/usage/proxy.rst
- add segwit examples in README 
- segwit in documentation
- add more modules to documantation

CODE-related
- make all code < 80 chars !?
- improve test structure - look at python-bitcoinlib or its derived python-bitcointx for example

Efficiency
- make all internal variables bytes for processing and convert when input (hex usually) or output (displaying hex usually)
  . hmm, only applies for Addresses' classes

WINDOWS
- it seems that the default port does not work on windows; need to specify the port explicitly in NodeProxy

OTHERLIBS-related
- add to bitcoin-rpc lib option to ignore invalid ssl cert
  . needed to access remotely withut cert (for other validators from clients)
  . https://github.com/jgarzik/python-bitcoinrpc/pull/50
  . but not in a lib release yet
  . add config.ini option to optionally ignore cert so that it works when calling btcd remotely

OTHER
- reminder: update copyright in all files 2018-2022?
- create script: clean-less-than-sats 100000 bc1q86gsg4t32...
- create test with 260 outputs (inputs too much trouble) - file: test_extreme_txs.py
- create test with script of 260 and another with 66000 commands
- make test of send to P2WPKH transaction example


